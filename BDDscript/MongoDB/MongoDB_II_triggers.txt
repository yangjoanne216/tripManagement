//II Triggers in APP service
//II.1 SyncAccommodationToCity
exports = async function(changeEvent) {
  const svc      = context.services.get("mongodb-atlas");
  const db       = svc.db("tripManagementDB");
  const cityCol  = db.collection("city");
  const accCol   = db.collection("accommodation");
  const accId    = changeEvent.documentKey._id;
  let   doc      = changeEvent.fullDocument;

  if (!doc) {
    doc = await accCol.findOne({ _id: accId });
  }

  switch (changeEvent.operationType) {
    case "insert":
    case "replace":
    case "update": {
      if (!doc || !doc.city || !doc.city.id) {
        console.warn("Skip sync: missing doc.city.id", changeEvent);
        return;
      }
      const cityId = doc.city.id;

      await cityCol.updateOne(
        { _id: cityId, "accommodations.id": accId },
        { $set: {
            "accommodations.$.name":      doc.name,
            "accommodations.$.price":     doc.price,
            "accommodations.$.available": doc.available
          }
        }
      );

      await cityCol.updateOne(
        { _id: cityId, "accommodations.id": { $ne: accId } },
        { $push: {
            accommodations: {
              id:        accId,
              name:      doc.name,
              price:     doc.price,
              available: doc.available
            }
          }
        }
      );
      break;
    }

    case "delete": {
      await cityCol.updateMany(
        { "accommodations.id": accId },
        { $pull: { accommodations: { id: accId } } }
      );
      break;
    }

    default:
  }
};

//II.2 SyncPOIToCity
exports = async function(changeEvent) {
  const svc     = context.services.get("mongodb-atlas");
  const db      = svc.db("tripManagementDB");
  const cityCol = db.collection("city");
  const poiCol  = db.collection("pointOfInterest");
  const poiId   = changeEvent.documentKey._id;
  let   doc     = changeEvent.fullDocument;

  console.log(">>> changeEvent.fullDocument:", changeEvent.fullDocument);

  if (!doc) {
    doc = await poiCol.findOne({ _id: poiId });
    console.log(">>> fetched from DB:", doc);
  }

  if (!doc || !doc.city || !doc.city.id) {
    console.error("Skip POIâ†’City sync, missing doc.city.id");
    return;
  }

  const cityId = doc.city.id;

  switch (changeEvent.operationType) {
    case "insert":
    case "replace":
    case "update":
      await cityCol.updateOne(
        { _id: cityId, "pointsOfInterest.id": poiId },
        { $set: { "pointsOfInterest.$.name": doc.name } }
      );
      await cityCol.updateOne(
        { _id: cityId, "pointsOfInterest.id": { $ne: poiId } },
        { $push: {
            pointsOfInterest: { id: poiId, name: doc.name }
          }
        }
      );
      break;

    case "delete":
      await cityCol.updateMany(
        { "pointsOfInterest.id": poiId },
        { $pull: { pointsOfInterest: { id: poiId } } }
      );
      break;
  }
};


//II.3 SyncCityNameToChildren
exports = async function(changeEvent) {
  const svc     = context.services.get("mongodb-atlas");
  const db      = svc.db("tripManagementDB");
  const cityCol = db.collection("city");
  const poiCol  = db.collection("pointOfInterest");
  const accCol  = db.collection("accommodation");

  const cityId = changeEvent.documentKey._id;

  let newName;
  if (changeEvent.operationType === "update") {
    newName = changeEvent.updateDescription?.updatedFields?.name;
    if (!newName) {
      return;
    }
  } else if (changeEvent.operationType === "replace") {
    newName = changeEvent.fullDocument?.name;
    if (!newName) {
      const cityDoc = await cityCol.findOne(
        { _id: cityId },
        { projection: { name: 1 } }
      );
      newName = cityDoc?.name;
      if (!newName) return;
    }
  } else {
    return;
  }

  await poiCol.updateMany(
    { "city.id": cityId },
    { $set: { "city.name": newName } }
  );

  await accCol.updateMany(
    { "city.id": cityId },
    { $set: { "city.name": newName } }
  );
};


//II.4 syncPointOfInterestNameToActivity 
exports = async function(changeEvent) {
  const svc    = context.services.get("mongodb-atlas");
  const db     = svc.db("tripManagementDB");
  const actCol = db.collection("activity");
  const poiCol = db.collection("pointOfInterest");
  const poiId  = changeEvent.documentKey._id;
  let doc      = changeEvent.fullDocument;

  if (!doc) {
    doc = await poiCol.findOne({ _id: poiId }, { projection: { name: 1 } });
  }

  const op = changeEvent.operationType;
  switch (op) {
    case "update": {
      const updated = changeEvent.updateDescription?.updatedFields;
      if (!updated || updated.name === undefined) return;
      const newName = updated.name;
      await actCol.updateMany(
        { "pointOfInterest.id": poiId },
        { $set: { "pointOfInterest.name": newName } }
      );
      break;
    }
    case "insert":
    case "replace": {
      if (!doc?.name) return;
      const newName = doc.name;
      await actCol.updateMany(
        { "pointOfInterest.id": poiId },
        { $set: { "pointOfInterest.name": newName } }
      );
      break;
    }
    case "delete": {
      await actCol.deleteMany({ "pointOfInterest.id": poiId });
      break;
    }
    default:
      return;
  }
};

//II.5 cascadeDeleteCityChildren
exports = async function(changeEvent) {
  if (changeEvent.operationType !== "delete") return;

  const cityId = changeEvent.documentKey._id;

  const svc = context.services.get("mongodb-atlas");
  const db  = svc.db("tripManagementDB");

  await Promise.all([
    db.collection("pointOfInterest").deleteMany({ "city.id": cityId }),
    db.collection("accommodation").   deleteMany({ "city.id": cityId })
  ]);
};

//II.6 cascadeDeletePOIChildren
exports = async function(changeEvent) {
  if (changeEvent.operationType !== "delete") return;

  const poiId = changeEvent.documentKey._id;

  const svc   = context.services.get("mongodb-atlas");
  const db    = svc.db("tripManagementDB");
  const actCol = db.collection("activity");

  const result = await actCol.deleteMany({ "pointOfInterest.id": poiId });

  console.log(`CascadeDeleteActivitiesOnPOIDelete: removed ${result.deletedCount} activities for POI ${poiId}`);
};
